package ${package}.${moduleName}.server.basecontroller;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.yanhua.cloud.validation.annotation.YHValid;
import com.yanhua.cloud.validation.annotation.YHValidParam;
import com.yanhua.common.pojo.PublicResult;
import com.yanhua.rm.rcp.access.server.domain.transfor.${englishName}Transfor;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import ${package}.${moduleName}.domain.vo.${englishName}Vo;
import ${package}.${moduleName}.server.domain.po.${className}Po;
import ${package}.${moduleName}.server.service.I${englishName}Service;

import java.util.List;
import java.util.stream.Collectors;

/**
 * ${comments}
 *
 * @author ${author}
 */
@RestController
@RequestMapping("/${version}/base/${englishName2}")
@Api(tags = "${comments}")
@YHValidParam
public class ${englishName}Controller {
    @Autowired
    private I${englishName}Service ${englishName2}Service;

    @PostMapping("/page")
    @ApiOperation(value = "分页查询", httpMethod = "POST")
    public PublicResult<IPage<${englishName}Vo>> page(Long current, Long size, @RequestBody ${englishName}Vo params) {
return PublicResult.success(${englishName2}Service.page(new Page<>(current, size),
    queryWrapper(params)).convert(${englishName}Transfor.INSTANCE::toVo));
    }

    @GetMapping("/list")
    @ApiOperation(value = "列表查询", httpMethod = "GET")
    public PublicResult<List<${englishName}Vo>> list(${englishName}Vo params) {
return PublicResult.success(${englishName2}Service.list( queryWrapper(params)).stream()
            .map(${englishName}Transfor.INSTANCE::toVo).collect(Collectors.toList()));
    }

    @GetMapping("/info")
    @ApiOperation(value = "详情查询", httpMethod = "GET")
    public PublicResult<${englishName}Vo> list(String id) {
        return PublicResult.success(${englishName}Transfor.INSTANCE
            .toVo(${englishName2}Service.getById(id)));
    }

    @PostMapping("/record")
    @ApiOperation(value = "记录数据", httpMethod = "POST")
    public PublicResult<String> record(@YHValid @RequestBody ${englishName}Vo vo) {
        ${className}Po po =${englishName}Transfor.INSTANCE.toPo(vo);
        return ${englishName2}Service.saveOrUpdate(po)?PublicResult.success(po.getId())
            :PublicResult.failed("");
    }

    @PostMapping("/delete")
    @ApiOperation(value = "删除数据", httpMethod = "POST")
    public PublicResult<Boolean> record(@RequestBody List<String> ids) {
        return PublicResult.success(${englishName2}Service.yhDelete(new LambdaUpdateWrapper<${className}Po>().in(${className}Po::getId, ids), null));
    }

    private LambdaQueryWrapper<${className}Po> queryWrapper(${englishName}Vo params){
        LambdaQueryWrapper<${className}Po> queryWrapper = new LambdaQueryWrapper<>();
        #foreach ($column in $columns)
            //${column.chineseName}
            #if(${column.attrType} == "String")
queryWrapper.like(StringUtils.isNotBlank(params.${column.getName}()),
            #else
queryWrapper.eq(params.${column.getName}() != null,
            #end
${className}Po::${column.getName}, params.${column.getName}());
        #end
        return queryWrapper;
    }
}
